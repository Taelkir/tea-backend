{"version":3,"sources":["components/Header.js","components/ColourPicker.js","components/Drinker.js","components/DrinkerList.js","components/App.js","serviceWorker.js","index.js","tea.svg"],"names":["Header","numOfStaff","this","props","react_default","a","createElement","className","src","tea","alt","Component","ColourPicker","state","activeColour","teaColours","_this$props","updateColour","colourPickerHide","index","lib","colors","triangle","onChange","color","e","hex","Drinker","colourPickerActive","handleColourPickerShow","_this","setState","prevState","handleColourPickerHide","colourPicker","name","drink","colourHex","mugshot","components_ColourPicker","onClick","charAt","toUpperCase","slice","style","backgroundColor","DrinkerList","drinkers","map","drinker","components_Drinker","imageSrc","key","toString","App","handleUpdateColour","newColour","newestColour","components_Header","length","components_DrinkerList","Boolean","window","location","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.fdda3541.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport tea from '../tea.svg';\r\n\r\nclass Header extends Component {\r\n  render() {\r\n\r\n    const { numOfStaff } = this.props;\r\n\r\n    return (\r\n        <header className=\"App-header\">\r\n          <img src={tea} className=\"App-logo\" alt=\"logo\" />\r\n          <small>Now serving {numOfStaff} hot drinks</small>\r\n          <h1>Tea</h1>\r\n        </header>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Header;\r\n","import React, { Component } from 'react';\r\nimport { TwitterPicker } from 'react-color';\r\n// https://casesandberg.github.io/react-color/\r\n\r\nclass ColourPicker extends Component {\r\n  state = {\r\n    activeColour: \"#fff\",\r\n    teaColours: ['#FFF8DC', '#FFEBCD', '#FFE4C4', '#FFDEAD', '#F5DEB3', '#DEB887', '#D2B48C', '#8B4513', '#A0522D', '#502916'],\r\n  }\r\n  render () {\r\n    // Props\r\n    const {\r\n      updateColour,\r\n      colourPickerHide,\r\n      index\r\n    } = this.props;\r\n\r\n    // Passes the new input colours up the state\r\n    const handleNewColour = (color, e) => {\r\n      updateColour(color.hex, index);\r\n      colourPickerHide();\r\n    }\r\n\r\n    return (\r\n      <TwitterPicker\r\n        colors = { this.state.teaColours }\r\n        triangle = { \"hide\" }\r\n        onChange = { handleNewColour } />\r\n    );\r\n  }\r\n}\r\n\r\nexport default ColourPicker;\r\n","import React, { Component } from 'react';\r\nimport ColourPicker from \"./ColourPicker\"\r\n\r\nclass Drinker extends Component {\r\n  state = {\r\n    colourPickerActive: false\r\n  }\r\n\r\n  handleColourPickerShow = () => {\r\n    this.setState( prevState => {\r\n      return {\r\n        colourPickerActive: true\r\n      }\r\n    });\r\n  }\r\n\r\n  // Passed down to the ColourPicker so that it can hide itself\r\n  handleColourPickerHide = () => {\r\n    this.setState( prevState => {\r\n      return {\r\n        colourPickerActive: false\r\n      }\r\n    });\r\n  }\r\n\r\n\r\n  render() {\r\n    // Get props\r\n    const {\r\n      name,\r\n      drink,\r\n      colourHex,\r\n      mugshot,\r\n      updateColour,\r\n      index\r\n    } = this.props;\r\n\r\n    // Decide whether to show the colour picker or not\r\n    let colourPicker;\r\n    if (this.state.colourPickerActive) {\r\n      colourPicker = <ColourPicker updateColour = { updateColour } index = { index } colourPickerHide = { this.handleColourPickerHide } />\r\n    } else {\r\n      colourPicker = <button onClick={ this.handleColourPickerShow } className=\"show-colour-picker\">Pick new colour</button>\r\n    }\r\n\r\n    // Aaand render\r\n    return (\r\n      <li className=\"drinker-grid\">\r\n\r\n        <img\r\n          className=\"drinker-image\"\r\n          src = { mugshot }\r\n          alt = { name }/>\r\n\r\n        <p\r\n          className=\"drinker-info\">\r\n          {drink.charAt(0).toUpperCase() + drink.slice(1)}</p>\r\n\r\n        <div\r\n          className=\"drinker-colour\"\r\n          style={{backgroundColor: colourHex}}>\r\n          { colourPicker }\r\n\r\n        </div>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Drinker;\r\n","import React, { Component } from 'react';\r\nimport Drinker from \"./Drinker\";\r\n\r\nclass DrinkerList extends Component {\r\n\r\n\r\n  render() {\r\n\r\n    const { drinkers, updateColour } = this.props;\r\n\r\n    return (\r\n        <main>\r\n          <ul>\r\n            {drinkers.map( (drinker, index) =>\r\n              <Drinker\r\n                name = { drinker.name }\r\n                drink = { drinker.drink }\r\n                colourHex = { drinker.colourHex }\r\n                mugshot = { drinker.imageSrc }\r\n                updateColour = { updateColour }\r\n                index = { index }\r\n                key = { index.toString() }\r\n              />\r\n            )}\r\n          </ul>\r\n        </main>\r\n    );\r\n  }\r\n}\r\n\r\nexport default DrinkerList;\r\n","import React, { Component } from 'react';\r\nimport '../styles/App.scss';\r\nimport Header from \"./Header\";\r\nimport DrinkerList from \"./DrinkerList\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    drinkers: [\r\n      {\r\n        name: \"Tom\",\r\n        drink: \"tea\",\r\n        colourHex: \"#BC7B3B\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/tom.jpg\",\r\n      },\r\n      {\r\n        name: \"Jacob\",\r\n        drink: \"coffee\",\r\n        colourHex: \"#826857\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/jacob.jpg\",\r\n      },\r\n      {\r\n        name: \"James\",\r\n        drink: \"tea\",\r\n        colourHex: \"#f9d79f\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/james_fox.jpg\",\r\n      },\r\n      {\r\n        name: \"Garrie\",\r\n        drink: \"tea\",\r\n        colourHex: \"#44190B\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/garrie.jpg\",\r\n      },\r\n      {\r\n        name: \"Adam\",\r\n        drink: \"coffee\",\r\n        colourHex: \"#c66b57\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/adam.jpg\",\r\n      },\r\n      {\r\n        name: \"Sarah\",\r\n        drink: \"Fruit Tea\",\r\n        colourHex: \"#C71585\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/sarah.jpg\",\r\n      },\r\n      {\r\n        name: \"Rachel\",\r\n        drink: \"Decaf Tea\",\r\n        colourHex: \"#000000\",\r\n        imageSrc: \"https://media.alliescomputing.com/media/staff/rachel.jpg\",\r\n      }\r\n    ]\r\n  };\r\n\r\n  // Is passed info up from the drinker component when the form inside it is submitted\r\n  handleUpdateColour = (newColour, index) => {\r\n    this.setState( prevState => {\r\n      return {\r\n        newestColour: prevState.drinkers[index].colourHex = newColour\r\n      }\r\n    });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Header\r\n          numOfStaff = { this.state.drinkers.length }\r\n        />\r\n        <DrinkerList\r\n          drinkers = { this.state.drinkers }\r\n          updateColour = { this.handleUpdateColour }\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read http://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: http://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n","module.exports = __webpack_public_path__ + \"static/media/tea.4ff323da.svg\";"],"sourceRoot":""}